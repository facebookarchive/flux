"use strict";(self.webpackChunkflux_website=self.webpackChunkflux_website||[]).push([[340],{3603:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return k},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var n=a(3117),r=a(102),i=(a(8771),a(3905)),o=["components"],s={id:"dispatcher",title:"Dispatcher"},l=void 0,p={unversionedId:"dispatcher",id:"dispatcher",title:"Dispatcher",description:"Dispatcher is used to broadcast payloads to registered callbacks. This is different from generic pub-sub systems in two ways:",source:"@site/../docs/Dispatcher.md",sourceDirName:".",slug:"/dispatcher",permalink:"/flux/docs/dispatcher",draft:!1,editUrl:"https://github.com/facebook/flux/edit/master/docs/../docs/Dispatcher.md",tags:[],version:"current",lastUpdatedBy:"Yangshun Tay",lastUpdatedAt:1654233097,formattedLastUpdatedAt:"Jun 3, 2022",frontMatter:{id:"dispatcher",title:"Dispatcher"},sidebar:"docs",previous:{title:"In-Depth Overview",permalink:"/flux/docs/in-depth-overview"},next:{title:"Flux Utils",permalink:"/flux/docs/flux-utils"}},c={},d=[{value:"API",id:"api",level:2},{value:"Example",id:"example",level:2}],u={toc:d},h="wrapper";function k(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)(h,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Dispatcher is used to broadcast payloads to registered callbacks. This is different from generic pub-sub systems in two ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Callbacks are not subscribed to particular events. Every payload is dispatched to every registered callback."),(0,i.kt)("li",{parentName:"ul"},"Callbacks can be deferred in whole or part until other callbacks have been executed.")),(0,i.kt)("p",null,"Check out ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/facebook/flux/blob/master/src/Dispatcher.js"},"Dispatcher.js")," for the source code."),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"register(function callback): string"))," Registers a callback to be invoked with every dispatched payload. Returns a token that can be used with ",(0,i.kt)("inlineCode",{parentName:"p"},"waitFor()"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"unregister(string id): void"))," Removes a callback based on its token.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"waitFor(array<string> ids): void"))," Waits for the callbacks specified to be invoked before continuing execution of the current callback. This method should only be used by a callback in response to a dispatched payload.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"dispatch(object payload): void"))," Dispatches a payload to all registered callbacks.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"isDispatching(): boolean"))," Is this Dispatcher currently dispatching."))),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"For example, consider this hypothetical flight destination form, which selects a default city when a country is selected:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var flightDispatcher = new Dispatcher();\n\n// Keeps track of which country is selected\nvar CountryStore = {country: null};\n\n// Keeps track of which city is selected\nvar CityStore = {city: null};\n\n// Keeps track of the base flight price of the selected city\nvar FlightPriceStore = {price: null};\n")),(0,i.kt)("p",null,"When a user changes the selected city, we dispatch the payload:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"flightDispatcher.dispatch({\n  actionType: 'city-update',\n  selectedCity: 'paris',\n});\n")),(0,i.kt)("p",null,"This payload is digested by ",(0,i.kt)("inlineCode",{parentName:"p"},"CityStore"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"flightDispatcher.register(function (payload) {\n  if (payload.actionType === 'city-update') {\n    CityStore.city = payload.selectedCity;\n  }\n});\n")),(0,i.kt)("p",null,"When the user selects a country, we dispatch the payload:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"flightDispatcher.dispatch({\n  actionType: 'country-update',\n  selectedCountry: 'australia',\n});\n")),(0,i.kt)("p",null,"This payload is digested by both stores:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"CountryStore.dispatchToken = flightDispatcher.register(function (payload) {\n  if (payload.actionType === 'country-update') {\n    CountryStore.country = payload.selectedCountry;\n  }\n});\n")),(0,i.kt)("p",null,"When the callback to update ",(0,i.kt)("inlineCode",{parentName:"p"},"CountryStore")," is registered, we save a reference to the returned token. Using this token with ",(0,i.kt)("inlineCode",{parentName:"p"},"waitFor()"),", we can guarantee that ",(0,i.kt)("inlineCode",{parentName:"p"},"CountryStore")," is updated before the callback that updates ",(0,i.kt)("inlineCode",{parentName:"p"},"CityStore")," needs to query its data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"CityStore.dispatchToken = flightDispatcher.register(function (payload) {\n  if (payload.actionType === 'country-update') {\n    // `CountryStore.country` may not be updated.\n    flightDispatcher.waitFor([CountryStore.dispatchToken]);\n    // `CountryStore.country` is now guaranteed to be updated.\n\n    // Select the default city for the new country\n    CityStore.city = getDefaultCityForCountry(CountryStore.country);\n  }\n});\n")),(0,i.kt)("p",null,"The usage of ",(0,i.kt)("inlineCode",{parentName:"p"},"waitFor()")," can be chained, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"FlightPriceStore.dispatchToken = flightDispatcher.register(function (payload) {\n  switch (payload.actionType) {\n    case 'country-update':\n    case 'city-update':\n      flightDispatcher.waitFor([CityStore.dispatchToken]);\n      FlightPriceStore.price = getFlightPriceStore(\n        CountryStore.country,\n        CityStore.city,\n      );\n      break;\n  }\n});\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"country-update")," payload will be guaranteed to invoke the stores' registered callbacks in order: ",(0,i.kt)("inlineCode",{parentName:"p"},"CountryStore"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"CityStore"),", then ",(0,i.kt)("inlineCode",{parentName:"p"},"FlightPriceStore"),"."))}k.isMDXComponent=!0}}]);